What happens when you initialize a repository? Why do you need to do it?

type git init to initialise. doesn’t create any commits. creates repository

How is the staging area different from the working directory and the repository? What value do you think it offers?

staging area is where you store your files which you’d like to commit in the future. the working directory will initially contain these files, but you can choose which files from the working directory that you want to actually add to the staging area for committing later. 

How can you use the staging area to make sure you have one commit per logical change?

with git diff (no parameters), you can compare what you have in the staging area with what you have in the working directory, so that you can see exactly what changes you're about to commit. this way you can take a look at what you're about to add to the staging area. git diff --staged shows you the difference between the staging area and the commit, so you can double check the changes that you're about to commit. also git reset --hard clears all changes in the working directorty and the staging area.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches are an extremely useful tool which allow you to manage seperate versions of your code. For example, if you wanted to try something experimentally, you could create a seperate branch from the master. This way your team can continue to work on the master, but you could work on the experimental feature yourself. Later you can opt to merge the branches.

How do the diagrams help you visualize the branch structure?

Diagrams provide a clear picture of how certain commits can be 'lost' or not on a path where they're able to be accessed. git checkout -b 'branch name' is used to both create a branch and then check it out
