NEW TEST 29/8/17

When would you want to use a remote repository rather than keeping all your work local?

remote repositories are useful for sharing work. In a workplace withg multiple employees working on the same programs, it would be useful to be able to post all of your online for your employees to see (and change). Another good use is in community projects, as it allows random members of the community to view your code and potentially edit or add to it.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

By pulling changes manually, you'll avoid unexpected occurances such as code that you're working on being changed by someone else working on the same project. Because people work on solutions in different manners and at different rates, and often code has to go backwards before it can go forwards, a live-updating program which is shared between developers could prove troublesome.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are used on github in order to make a copy of an existing project belonging to a different user. By using a fork rather than a clone, github retains a link between the 2 projects by showing how many forks of the original project there are and linking the new project to the original one. A clone is a direct copy of a project, which can be useful for studying someone's project when you would like to view it offline or just in your own IDE. It's just like a fork but for the fact that a fork retains the link. Lastly, a branch remains in the original project, and allows the user to save different versions of a project able to be merged at a later point. For example, an experimental feature can be branched off the master flow so that you may continue working on the master and keep track of the working version of the software.

What is the benefit of having a copy of the last known state of the remote stored locally?

For 1 thing, having the last known state of the remote stored locally allows you to use git status in order to see how many commits ahead of this state you are. By pulling code off of github, you are essentially fetching and then merging this code into your own. The reason most pulls happen 'automatically' is because they are fast-forward merges, wherein the commit to be merged into is an ancestory of the other commit. Eg in git merge master origin/master, if master is an ancestor of origin/master, the merge will be fast-forwarded because all of the code from master will have already been deliberately edited, removed or kept in in origin/master.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

sharing code and collaborating would be far more difficult without git and github. they allow for smooth code review, sharing, mering and far more. the process of keeping track of different versions of code for different branches or forks would be infinitely more confusing if it weren't for git and github.
