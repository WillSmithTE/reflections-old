Viewing 2 versions of the file helped to identify the cause of the bug for two main reasons. Firstly, having the programs side-by-side makes it much easier to identify a difference and hence find a potential error. Secondly, by reducing the code down to the actual line differences between the two programs, I no longer had to trawl through an entire program just to find one line which was wrong.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

There are 2 main pros. Firstly it provides a sense of comfort when drastically modifying a program. Having to undo all the 100 changes you just made is a pain, but knowing you have a saved version elsewhere is much more safe and also much more encouraging. Drastic changes to code can be necessary and hugely beneficial, so encouraging this is a plus
The other benefit is added safety to your project. By having a whole load of past versions, you can refer back to an old version of your project if you’re looking for a certain thing you changed, and could also compare the old and new files to see exactly what you changed.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Pros:
- Avoid creating commits which are too big or too small
- Avoid creating commits which don’t compile
Cons:
- Vulnerable to user error (forgetting to commit)

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because Git is designed to take different versions of code/programs, there will naturally by multiple files which work together. It would be like if each column of text in a google doc was in a seperate file. You need all of the columns to save at the exact same point of time for the project to make sense and work.

How can you use the commands git log and git diff to view the history of files?

Git log is used to view the entire commit history for a git project. Upon typing Git Log, the user is presented with a list of commits and their ID, message, date and time. These commits are sorted with the newest at the top.
Git diff is used to compare 2 commits from the git log. It’s used by typing ‘git diff’ followed by the ID’s of 2 commits based on the git log. Git diff will show you which lines have been added and deleted, providing a picture of exactly what changes were made between the earlier and later commit. Provided your git has been fully configured, you can also see the deleted lines in red and the added lines in green for convinience.

How might using version control make you more confident to make changes that could break something?

Having the ability to go back and review past commits will increase my confidence in making big changes, as I explained in reflection 1.